@using Microsoft.Owin.StaticFiles.DirectoryFormatters
@using RazorEngine
@using SignalRSelfHost
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Projekt</title>

    <!-- Bootstrap core CSS -->
    <link href="/Content/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="/Content/css/starter-template.css" rel="stylesheet">

    <!--Script references. -->
    <script type="text/javascript">
        var require = {
            //waitsSeconds: 3,

            //By default load any module IDs from Content/js
            baseUrl: '../Content/js',

            paths: {
                'jquery': './lib/jquery',
                'signalr': './lib/signalr',
                'signalr.hubs': 'http://localhost:9000/signalr/hubs?',
                'knockout': 'lib/knockout',
                'sammy': 'lib/sammy',
                'text': 'lib/text',
                'bootstrap': 'lib/bootstrap',
            },

            // Define dependency sequence
            shim: {
                'jquery': { exports: '$' },
                "bootstrap": { deps: ["jquery"] },
                "knockout": { deps: ["jquery"] },
                "signalr": { deps: ["jquery"], exports: '$.connection' },
                "signalr.hubs": { deps: ["signalr"] },
            }
        };
    </script>
    <script src="/Content/js/lib/require.js"></script>
</head>

<body>
    <div id="app">
        <div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
            <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="#">Projekt</a>
                </div>
                <!-- links for each main page from viewmodel-->
                <div class="collapse navbar-collapse">
                    <ul class="nav navbar-nav" data-bind="foreach:views">
                        <!-- iterate over app's views and create links with view's title attribute-->
                        <li data-bind="css: { active: $root.currentView() == $data.title }">
                            <a data-bind="text: $data.title, attr:{ href:'#' + $data.title }"></a>
                        </li>
                    </ul>
                </div><!--/.nav-collapse -->
            </div>
        </div>

        <div class="container">
            <div class="row">
                <div class="span12" data-bind="with:currentView">
                    <div data-bind="template: { name: templateName, data: model}"></div>
                </div>
            </div>

            <div class="starter-template">
                <h1>Monitoring</h1>
                <p class="lead">Gesamtstatus.<br> Details...</p>
                
                <div id="tpl">should be hidden...</div>

                <h2>--- Razor Test ---</h2>
                <ul>
                    @*@foreach (var value in Model.Numbers)
                        {
                            <li>@value</li>
                        }*@
                </ul>

                <br />


                <input type="text" id="message" />
                <input type="button" id="sendmessage" value="Send" />
                <input type="hidden" id="displayname" />
                <ul id="discussion"></ul>
            </div>

        </div><!-- /.container -->
    </div>   

    <!--Add script to update the page and send messages.-->
    <script type="text/javascript">
        require(['jquery', 'knockout', 'sammy', 'signalr.hubs', 'viewmodel/app', 'text!../../Views/home.html', 'text!../../Views/energylive.html'],
            function (jquery, ko, sammy, signalr, appViewModel, viewhome, viewenergylive) {

                // add template to dom
                jquery('#tpl').append(viewhome);
                jquery('#tpl').append(viewenergylive);

                // initialize view model
                var appModel = new appViewModel();
                ko.applyBindings(appModel, document.getElementById("app"));

                // set up Sammy
                sammy(function () {
                    this.get('#:view', function () {
                        appModel.navigateToView(this.params.view);
                    });
                }).run('#Home');

                // set up SignalR
                setupSignalr(jquery);
            });

        var setupSignalr = function (jquery) {
            // set signalr base url
            jquery.connection.hub.url = "http://localhost:9000/signalr";

            // Declare a proxy to reference the hub.
            var chat = jquery.connection.mainHub;

            // Create a function that the hub can call to broadcast messages.
            chat.client.sendMessage = function (name, message) {
                // Html encode display name and message.
                var encodedName = $('<div />').text(name).html();
                var encodedMsg = $('<div />').text(message).html();
                // Add the message to the page.
                jquery('#discussion').append('<li><strong>' + encodedName
                    + '</strong>:&nbsp;&nbsp;' + encodedMsg + '</li>');
            };

            // Get the user name and store it to prepend to messages.
            //$('#displayname').val(prompt('Enter your name:', ''));
            jquery('#displayname').val("msk");


            // Set initial focus to message input box.
            jquery('#message').focus();

            // Start the connection.
            jquery.connection.hub.start().done(function () {
                jquery('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), jquery('#message').val());

                    // Clear text box and reset focus for next comment.
                    jquery('#message').val('').focus();
                });
            });
        };
    </script>
</body>
</html> 